# Enable/disable services
rabbitmq:
  enabled: true
  rabbitmq:
    image: docker.io/library/rabbitmq:3.13-management-alpine
    username: guest
    password: guest
    port: 5672
    vhost: "/"

redis:
  enabled: true
  redis:
    image: docker.io/library/redis:7.2-alpine
    persistence:
      enabled: true
      size: 50Gi
      storageClass: standard-rwo
      accessMode: ReadWriteOnce

serviceAccount:
  name: "aktus-ai-platform-sa"

# Global values passed to all subcharts
global:
  serviceAccountName: "aktus-ai-platform-sa"
  billing:
    enabled: true
    reportingEndpoint: "billing:8090/report"

# Billing configuration
billing:
  enabled: true
  reportingSecret: ""
  serviceName: "aktus-ai-platform"
  consumerId: "project:aktus-ai-platform-public"

# Core Services
aktus-database-service:
  enabled: true
  serviceAccount: "{{ .Values.serviceAccount.name }}"
  aktusDatabase:
    image: us-docker.pkg.dev/aktus-ai-platform-public/aktus-platform-marketplace/aktus-db-manager:v1.0.0
    dbConfig:
      username: "root"
      password: "secret"
      host: aktus-postgres
      port: 5432
      dbName: "root"

aktus-inference-service:
  enabled: true
  aktusInference:
    image: us-docker.pkg.dev/aktus-ai-platform-public/aktus-platform-marketplace/aktus-inference:v1.0.0
    serviceAccount:
      name: "{{ .Values.serviceAccount.name }}"
    nodeSelector:
      cloud.google.com/gke-accelerator: nvidia-tesla-a100
    resources:
      requests:
        nvidia.com/gpu: 1
      limits:
        nvidia.com/gpu: 1
    storage:
      models:
        bucketName: "aktus-platform-models"
      docUpload:
        bucketName: "aktus-platform-doc-upload"
      docProcessing:
        bucketName: "aktus-platform-doc-processing"

# Application Services
aktus-research-service:
  enabled: true
  serviceAccount:
    name: "{{ .Values.serviceAccount.name }}"
  aktusResearch:
    image: us-docker.pkg.dev/aktus-ai-platform-public/aktus-platform-marketplace/aktus-research:v1.0.0
    modelInference:
      address: "aktus-inference:50051"
    storage:
      documentUpload:
        bucketName: "aktus-platform-doc-upload"
      docProcessing:
        bucketName: "aktus-platform-doc-processing"
      extractedData:
        bucketName: "aktus-platform-extracted-data"

aktus-multimodal-data-ingestion-service:
  enabled: true
  aktusMdi:
    image: us-docker.pkg.dev/aktus-ai-platform-public/aktus-platform-marketplace/aktus-multimodal-data-ingestion:v1.0.0
    serviceAccount: "{{ .Values.serviceAccount.name }}"
    rabbitmq:
      host: "rabbitmq"
      port: "5672"
      vhost: "/"
      username: "guest"
      password: "guest"
    redis:
      host: "redis"
    modelInference:
      host: "aktus-inference:50051"
    vectorEmbedding:
      host: "aktus-embedding:8080"
    storage:
      models:
        bucketName: "aktus-platform-models"
      docUpload:
        bucketName: "aktus-platform-doc-upload"
      docProcessing:
        bucketName: "aktus-platform-doc-processing"
      extractedData:
        bucketName: "aktus-platform-extracted-data"

aktus-embedding-service:
  enabled: true

# PostgreSQL configuration
aktus-postgres-service:
  enabled: true
  serviceAccount: "{{ .Values.serviceAccount.name }}"
  aktusPostgres:
    image: docker.io/library/postgres:13.16
    username: "root"
    password: "secret"
    database: "root"
    persistence:
      enabled: true
      size: 10Gi
      storageClass: standard-rwo
      accessMode: ReadWriteOnce
      subPath: postgresql-data

# Storage configuration
storage:
  chroma:
    size: "500Gi"

# tester:
#   image: us-docker.pkg.dev/aktus-ai-platform-public/aktus-platform-marketplace/service-tests:v1.0.0