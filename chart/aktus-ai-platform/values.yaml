# Production Mode Configuration
enableProductionMode: false

# Enable/disable services
rabbitmq:
  enabled: true
  rabbitmq:
    image: docker.io/library/rabbitmq:3.13-management-alpine
    username: guest
    password: guest
    port: 5672
    vhost: "/"
    persistence:
      enabled: false
      useEmptyDir: true
      size: 8Gi
    resources:
      requests:
        cpu: 500m
        memory: 512Mi
      limits:
        cpu: 1000m
        memory: 1Gi
    readinessProbe:
      exec:
        command:
          - rabbitmq-diagnostics
          - check_port_connectivity
      initialDelaySeconds: 30
      periodSeconds: 10
      timeoutSeconds: 5
      failureThreshold: 3

redis:
  enabled: true
  redis:
    image: docker.io/library/redis:7.2-alpine
    persistence:
      enabled: false
      useEmptyDir: true
      size: 8Gi

serviceAccount:
  name: "${RELEASE_NAME}-serviceaccount"

# Global values passed to all subcharts
global:
  serviceAccountName: "${RELEASE_NAME}-serviceaccount"
  billing:
    enabled: true
    reportingEndpoint: "billing:8090/report"
  # Pass network settings to subcharts
  networkSettings:
    researchServiceIp: ""

  storageSettings:
    docUploadBucketName: ""
    docProcessingBucketName: ""
    extractedDataBucketName: ""

  # Enable or disable GCS bucket access
  enableGCSAccess: true
  aktusInference:
    replicas: 0

# Core Services
aktus-database-service:
  enabled: true
  serviceAccount: "${RELEASE_NAME}-serviceaccount"
  aktusDatabase:
    image: us-docker.pkg.dev/aktus-ai-platform-public/aktus-platform-marketplace/aktus-db-manager:v1.0.0
    dbConfig:
      username: "root"
      password: "secret"
      host: aktus-postgres
      port: 5432
      dbName: "root"
    serviceAccount:
      name: "${RELEASE_NAME}-serviceaccount"

aktus-inference-service:
  enabled: true
  aktusInference:
    image: us-docker.pkg.dev/aktus-ai-platform-public/aktus-platform-marketplace/aktus-inference:v1.0.0
    imagePullPolicy: Always
    serviceAccount: "${RELEASE_NAME}-serviceaccount"
    nodeSelector: 
      cloud.google.com/gke-accelerator: nvidia-tesla-a100
    tolerations:
      - key: nvidia.com/gpu
        operator: Exists
        effect: NoSchedule
    grpcPort: 50051
    serverConfig:
      uri: "[::]:50051"
      enableFlashAttention: 0
      hfLocalFilesOnly: 1
      defaultDevice: "cuda"
    modelConfig:
      minicpm:
        baseModelPath: "/models/minicpm/production/"
        peftModelPath: "/models/minicpm/production/"
        processorPath: "/models/minicpm/production/"
      yolo:
        modelPath: "/models/yolo/roboflow_yolo-v1/roboflow_yolo_weights_v1.pt"
    paths:
      models: "/models"
      docUpload: "/document_upload"
      docProcessing: "/doc_processing"
    storage:
      models:
        bucketName: "aktus-platform-models"
        readOnly: false
        mountOptions: "implicit-dirs,file-mode=0666,dir-mode=0777"
      docUpload:
        bucketName: "aktus-platform-doc-upload"
        readOnly: false
        mountOptions: "implicit-dirs,file-mode=0666,dir-mode=0777"
      docProcessing:
        bucketName: "aktus-platform-doc-processing"
        readOnly: false
        mountOptions: "implicit-dirs,file-mode=0666,dir-mode=0777"
      extractedData:
        bucketName: "aktus-platform-extracted-data"
        readOnly: false
        mountOptions: "implicit-dirs,file-mode=0666,dir-mode=0777"
    resources:
      requests:
        cpu: "1000" #"4000m"
        memory: "4Gi" #"16Gi"
        nvidia.com/gpu: 1
        ephemeral-storage: "5Gi"
      limits:
        cpu: "10000" #"8000m"
        memory: "72Gi" #"32Gi"
        nvidia.com/gpu: 1
        ephemeral-storage: "5Gi"

# Application Services
aktus-research-service:
  enabled: true
  serviceAccount:
    name: "${RELEASE_NAME}-serviceaccount"
  aktusResearch:
    image: us-docker.pkg.dev/aktus-ai-platform-public/aktus-platform-marketplace/aktus-research:v1.0.0
    service:
      type: ClusterIP
      port: 8080
    modelInference:
      address: "aktus-inference:50051"
    resources:
      requests:
        cpu: "1000m"
        memory: "4Gi"
      limits:
        cpu: "4000m"
        memory: "16Gi"
    storage:
      documentUpload:
        bucketName: "aktus-platform-doc-upload"
        readOnly: false
        mountOptions: "implicit-dirs,file-mode=0666,dir-mode=0777"
      docProcessing:
        bucketName: "aktus-platform-doc-processing"
        readOnly: false
        mountOptions: "implicit-dirs,file-mode=0666,dir-mode=0777"
      extractedData:
        bucketName: "aktus-platform-extracted-data"
        readOnly: false
        mountOptions: "implicit-dirs,file-mode=0666,dir-mode=0777"

aktus-multimodal-data-ingestion-service:
  enabled: true
  aktusMdi:
    image: us-central1-docker.pkg.dev/aktus-393100/zach-dev/service-ocr-graphrag-integration
    serviceAccount: "${RELEASE_NAME}-serviceaccount"
    resources:
      requests:
        cpu: "1000m"
        memory: "4Gi"
        ephemeral-storage: 5Gi
      limits:
        cpu: "16000m"
        memory: "64Gi"
        ephemeral-storage: 5Gi
    rabbitmq:
      host: "rabbitmq"
      port: "5672"
      vhost: "/"
      username: "guest"
      password: "guest"
    redis:
      host: "redis"
    modelInference:
      host: "aktus-inference:50051"
    vectorEmbedding:
      host: "aktus-embedding:8080"   
    storage:
      models:
        bucketName: "aktus-platform-models"
      docUpload:
        bucketName: "aktus-platform-doc-upload"
      docProcessing:
        bucketName: "aktus-platform-doc-processing"
      extractedData:
        bucketName: "aktus-platform-extracted-data"

aktus-embedding-service:
  enabled: true
  aktusEmbedding:
    image: gcr.io/aktus-ai-platform-public/aktus-platform-marketplace/aktus-embedding:v1.0.0
    serviceAccount: "${RELEASE_NAME}-serviceaccount"
    resources:
      requests:
        cpu: "1000m"
        memory: "2Gi"
        ephemeral-storage: "5Gi"
      limits:
        cpu: "14000m"
        memory: "60Gi"
        ephemeral-storage: "5Gi"
    storage:
      extractedData:
        bucketName: "aktus-platform-extracted-data"
      docUpload:
        bucketName: "aktus-platform-doc-upload"
      docProcessing:
        bucketName: "aktus-platform-doc-processing"
    persistence:
      enabled: true
      useEmptyDir: false
      size: 500Gi
    mdiService:
      endpoint: "http://aktus-multimodal-data-ingestion:5315"
    dbManager:
      host: "http://aktus-database:8080"

# PostgreSQL configuration
aktus-postgres-service:
  enabled: true
  serviceAccount: "${RELEASE_NAME}-serviceaccount"
  aktusPostgres:
    image: docker.io/library/postgres:13.16
    username: "root"
    password: "secret"
    database: "root"
    persistence:
      enabled: true  # Disable PVC by default
      useEmptyDir: false  # Use emptyDir instead
      size: 5Gi
      storageClass: standard
      accessMode: ReadWriteOnce
      subPath: postgresql-data
    initScripts:
      enabled: true
      configMap: postgres-init
    livenessProbe:
      initialDelaySeconds: 60
      periodSeconds: 10
    readinessProbe:
      initialDelaySeconds: 30
      periodSeconds: 5
    startupProbe:
      failureThreshold: 30
      periodSeconds: 10
      initialDelaySeconds: 30
      timeoutSeconds: 5

# Qdrant vector database configuration
qdrant:
  enabled: true
  qdrant:
    image: qdrant/qdrant:v1.13.1
    imagePullPolicy: Always
    serviceAccount: "${RELEASE_NAME}-serviceaccount"
    port: 6333
    service:
      type: LoadBalancer
      port: 6333
    persistence:
      enabled: true
      useEmptyDir: false
      size: 500Gi
    resources:
      requests:
        cpu: "500m"
        memory: "1Gi"
      limits:
        cpu: "1000m"
        memory: "2Gi"
    livenessProbe:
      initialDelaySeconds: 30
      periodSeconds: 10
    readinessProbe:
      initialDelaySeconds: 5
      periodSeconds: 5
    config:
      allowCrossOrigin: true
      serviceHost: "0.0.0.0"
      servicePort: 6333
      snapshotsIntervalSec: 300
      maxOptimizationThreads: 4
    hpa:
      enabled: false

# Storage configuration
storage:
  chroma:
    size: "10Gi"

# API keys for external services
secrets:
  openaiApiKey: "dummy-key-for-testing"
  huggingfaceLoginKey: "dummy-key-for-testing"

# tester:
#   image: us-docker.pkg.dev/aktus-ai-platform-public/aktus-platform-marketplace/service-tests:v1.0.0

# Knowledge Assistant configuration
aktus-knowledge-assistant-service:
  enabled: true
  serviceAccount:
    name: "${RELEASE_NAME}-serviceaccount"
  aktusKnowledgeAssistant:
    image: us-docker.pkg.dev/aktus-ai-platform-public/aktus-platform-marketplace/aktus-knowledge-assistant:v1.0.0
    imagePullPolicy: Always
    port: 80
    service:
      type: ClusterIP
      port: 8080
    resources:
      requests:
        cpu: "500m"
        memory: "512Mi"
      limits:
        cpu: "1000m" 
        memory: "1Gi"
    