# charts/aktus-postgres-service/templates/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: postgres-init
data:
  init.sql: |
    -- Create tables if they don't exist
    DO $$ 
    BEGIN
      -- CreateTable Account
      IF NOT EXISTS (SELECT FROM pg_tables WHERE tablename = 'Account') THEN
        CREATE TABLE "Account" (
            "id" TEXT NOT NULL,
            "userId" TEXT NOT NULL,
            "type" TEXT NOT NULL,
            "provider" TEXT NOT NULL,
            "providerAccountId" TEXT NOT NULL,
            "refresh_token" TEXT,
            "access_token" TEXT,
            "expires_at" INTEGER,
            "token_type" TEXT,
            "scope" TEXT,
            "id_token" TEXT,
            "session_state" TEXT,
            "oauth_token_secret" TEXT,
            "oauth_token" TEXT,
            CONSTRAINT "Account_pkey" PRIMARY KEY ("id")
        );
      END IF;

      -- CreateTable Session
      IF NOT EXISTS (SELECT FROM pg_tables WHERE tablename = 'Session') THEN
        CREATE TABLE "Session" (
            "id" TEXT NOT NULL,
            "sessionToken" TEXT NOT NULL,
            "userId" TEXT NOT NULL,
            "expires" TIMESTAMP(3) NOT NULL,
            CONSTRAINT "Session_pkey" PRIMARY KEY ("id")
        );
      END IF;

      -- CreateTable User
      IF NOT EXISTS (SELECT FROM pg_tables WHERE tablename = 'User') THEN
        CREATE TABLE "User" (
            "id" TEXT NOT NULL,
            "name" TEXT,
            "username" TEXT,
            "password" TEXT,
            "email" TEXT,
            "emailVerified" TIMESTAMP(3),
            "image" TEXT,
            "createdAt" TIMESTAMP(3) NOT NULL DEFAULT CURRENT_TIMESTAMP,
            "updatedAt" TIMESTAMP(3) NOT NULL,
            CONSTRAINT "User_pkey" PRIMARY KEY ("id")
        );
      END IF;

      -- CreateTable Domain
      IF NOT EXISTS (SELECT FROM pg_tables WHERE tablename = 'Domain') THEN
        CREATE TABLE "Domain" (
            "id" TEXT NOT NULL,
            "name" TEXT NOT NULL,
            "description" TEXT NOT NULL,
            "createdAt" TIMESTAMP(3) NOT NULL DEFAULT CURRENT_TIMESTAMP,
            "updatedAt" TIMESTAMP(3) NOT NULL,
            CONSTRAINT "Domain_pkey" PRIMARY KEY ("id")
        );
      END IF;

      -- CreateTable Usecase
      IF NOT EXISTS (SELECT FROM pg_tables WHERE tablename = 'Usecase') THEN
        CREATE TABLE "Usecase" (
            "id" TEXT NOT NULL,
            "name" TEXT NOT NULL,
            "description" TEXT NOT NULL,
            "hasDataSource" BOOLEAN NOT NULL DEFAULT false,
            "embedding_model" TEXT NOT NULL DEFAULT '',
            "chunking_strategy" TEXT NOT NULL DEFAULT 'semantic',
            "metric_type" TEXT NOT NULL DEFAULT 'cosine',
            "indexName" TEXT NOT NULL DEFAULT '',
            "createdAt" TIMESTAMP(3) NOT NULL DEFAULT CURRENT_TIMESTAMP,
            "updatedAt" TIMESTAMP(3) NOT NULL,
            "domainId" TEXT NOT NULL,
            CONSTRAINT "Usecase_pkey" PRIMARY KEY ("id")
        );
      END IF;

      -- CreateTable Pilot
      IF NOT EXISTS (SELECT FROM pg_tables WHERE tablename = 'Pilot') THEN
        CREATE TABLE "Pilot" (
            "id" SERIAL NOT NULL,
            "name" TEXT NOT NULL,
            "llm" TEXT NOT NULL,
            "retrieval_method" TEXT NOT NULL,
            "rerank_method" TEXT NOT NULL,
            "embeddings_weight" DOUBLE PRECISION NOT NULL DEFAULT 0,
            "top_k" INTEGER NOT NULL DEFAULT 2,
            "temperature" DOUBLE PRECISION NOT NULL DEFAULT 0,
            "answer_relevancy" DOUBLE PRECISION NOT NULL DEFAULT 0,
            "context_precision" DOUBLE PRECISION NOT NULL DEFAULT 0,
            "context_recall" DOUBLE PRECISION NOT NULL DEFAULT 0,
            "faithfulness" DOUBLE PRECISION NOT NULL DEFAULT 0,
            "createdAt" TIMESTAMP(3) NOT NULL DEFAULT CURRENT_TIMESTAMP,
            "updatedAt" TIMESTAMP(3) NOT NULL,
            "usecaseId" TEXT NOT NULL,
            CONSTRAINT "Pilot_pkey" PRIMARY KEY ("id")
        );
      END IF;

      -- CreateTable Task (updated schema)
      IF NOT EXISTS (SELECT FROM pg_tables WHERE tablename = 'Task') THEN
        CREATE TABLE "Task" (
            "id" UUID NOT NULL,
            "status" TEXT NOT NULL,
            "date_created" TIMESTAMP(3) NOT NULL DEFAULT CURRENT_TIMESTAMP,
            "date_updated" TIMESTAMP(3) NOT NULL,
            "expiration_date" TIMESTAMP(3),
            "result" JSONB,
            "service_name" TEXT,
            "task_metadata" JSONB,
            CONSTRAINT "Task_pkey" PRIMARY KEY ("id")
        );
      END IF;
    END $$;

    -- Create indexes if they don't exist
    DO $$
    BEGIN
      IF NOT EXISTS (SELECT 1 FROM pg_indexes WHERE indexname = 'Session_sessionToken_key') THEN
        CREATE UNIQUE INDEX "Session_sessionToken_key" ON "Session"("sessionToken");
      END IF;

      IF NOT EXISTS (SELECT 1 FROM pg_indexes WHERE indexname = 'User_username_key') THEN
        CREATE UNIQUE INDEX "User_username_key" ON "User"("username");
      END IF;

      IF NOT EXISTS (SELECT 1 FROM pg_indexes WHERE indexname = 'User_email_key') THEN
        CREATE UNIQUE INDEX "User_email_key" ON "User"("email");
      END IF;

      IF NOT EXISTS (SELECT 1 FROM pg_indexes WHERE indexname = 'Domain_name_key') THEN
        CREATE UNIQUE INDEX "Domain_name_key" ON "Domain"("name");
      END IF;

      IF NOT EXISTS (SELECT 1 FROM pg_indexes WHERE indexname = 'Pilot_name_key') THEN
        CREATE UNIQUE INDEX "Pilot_name_key" ON "Pilot"("name");
      END IF;
    END $$;

    -- Add foreign key constraints if they don't exist
    DO $$
    BEGIN
      IF NOT EXISTS (SELECT 1 FROM pg_constraint WHERE conname = 'Account_userId_fkey') THEN
        ALTER TABLE "Account" ADD CONSTRAINT "Account_userId_fkey" 
        FOREIGN KEY ("userId") REFERENCES "User"("id") ON DELETE CASCADE ON UPDATE CASCADE;
      END IF;

      IF NOT EXISTS (SELECT 1 FROM pg_constraint WHERE conname = 'Session_userId_fkey') THEN
        ALTER TABLE "Session" ADD CONSTRAINT "Session_userId_fkey" 
        FOREIGN KEY ("userId") REFERENCES "User"("id") ON DELETE CASCADE ON UPDATE CASCADE;
      END IF;

      IF NOT EXISTS (SELECT 1 FROM pg_constraint WHERE conname = 'Pilot_usecaseId_fkey') THEN
        ALTER TABLE "Pilot" ADD CONSTRAINT "Pilot_usecaseId_fkey" 
        FOREIGN KEY ("usecaseId") REFERENCES "Usecase"("id") ON DELETE RESTRICT ON UPDATE CASCADE;
      END IF;
    END $$;